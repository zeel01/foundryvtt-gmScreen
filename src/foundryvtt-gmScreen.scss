@import './styles/variables.scss';
@import './styles/mixins.scss';

$transition-timing: 400ms;

/* Expand the GM Screen Sideways when Sidebar is Collapsed */
:root {
  --sidebar-width: 310px;
}

#sidebar.app.collapsed ~ .gm-screen-app {
  --sidebar-width: 30px;
}

.gm-screen-app {
  width: calc(100vw - var(--sidebar-width));
  height: 60vh;
  top: 100%;
  position: fixed;
  left: 0;
  transform: translateY(0);
  transition: all $transition-timing ease-in-out;

  &.expanded {
    transform: translateY(-100%);

    .gm-screen-actions {
      .clear,
      .refresh {
        transform: translateY(0);
        transition-delay: $transition-timing / 2;
      }
    }
  }

  .gm-screen-container {
    @include spaced-vertical($space / 2);
    padding: $space / 2;
  }

  .gm-screen-actions {
    @include spaced($space / 2);

    display: flex;
    position: absolute;
    bottom: 100%;
    width: 100%;
    right: 0;
    padding: 0 $space;
    pointer-events: none;
    justify-content: flex-end;
    z-index: -1;

    button {
      width: auto;
      white-space: nowrap;
      pointer-events: all;
    }

    .clear,
    .refresh {
      transform: translateY(100%);
      transition: transform $transition-timing ease-in;
    }

    .clear {
      margin-right: auto;
    }
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(1, 1fr);
    gap: $space / 2;
    width: 100%;
    height: 100%;
  }

  .grid-cell {
    overflow: hidden;
    display: flex;
    flex-direction: column;
    box-shadow: inset 0 0 $space / 2 rgba(255, 255, 255, 0.2), 0 0 $space / 2 rgba(0, 0, 0, 0.2);
    padding: $space / 5;
    border-radius: $space / 2;
  }

  .grid-cell-header {
    @include spaced($space / 2);

    align-items: center;
    display: flex;
    width: 100%;

    > select {
      flex: 1 1 100%;
      width: 100%;
    }

    > a {
      display: block;
      flex: 0 0 auto;
      line-height: normal;
      margin: 0;
      padding: 0 ($space / 5);
      width: auto;
    }
  }

  /**
   * The overflows, heights, min-heights, and display flexes that follow are very specifically 
   * crafted and should not be changed on a whim. Various Applications in various systems 
   * expect different elements in the tree to overflow. This particular setup was the best 
   * needle-threading I could do.
   */

  .grid-cell-content-wrapper {
    flex: 1 100%;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    overflow-x: hidden;
    position: relative;
  }

  .grid-cell-content {
    width: 100%;
    overflow-y: auto;
    overflow-x: hidden;
    padding: $space / 5;
    position: relative;
    flex: 1; // emulates `.sheet > *` and `.window-app > *`

    display: flex;
    flex-direction: column;

    // override what is usually .sheet's min/max height/width
    min-width: unset !important;
    min-height: unset !important;
    max-height: unset !important; // prevent unecessary max heights
    max-width: 100% !important;

    > form {
      width: 100%;
      // overflow: auto;
      display: flex;
      flex-direction: column;
      overflow: unset; // fix PF2e

      > .lightbox-image {
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        height: 100%;
        width: 100%;
      }
    }

    .compact-journal-entry {
      min-height: 100%; // needed for dnd5e
    }

    .editor {
      height: 100%;
    }

    img {
      max-width: 100%;
      height: auto;
    }

    /* dnd5e specific tweaks */
    .sheet-body {
      overflow: auto !important;
    }

    /* MEME Compatibility */
    .CodeMirror-scroll {
      overflow: unset !important;
      margin-bottom: 0;
      margin-right: 0;
    }

    .CodeMirror-vscrollbar {
      overflow: hidden;
    }
  }

  .results {
    th {
      @include spaced(0.5em);
    }

    .drawn {
      opacity: 0.5;
    }

    .range {
      text-align: center;
    }
  }
}
